{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/es6cs","result":{"data":{"markdownRemark":{"html":"<h2>Comments</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// This is an in-line comment.</span>\n\n<span class=\"token comment\">/* This is a\nmulti-line comment */</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Data types</h2>\n<p>JavaScript provides seven different data types:</p>\n<table>\n<thead>\n<tr>\n<th>Data Types</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">undefined</code></td>\n<td>A variable that has not been assigned a value is of type <code class=\"language-text\">undefined</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">null</code></td>\n<td>no value.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">string</code></td>\n<td><code class=\"language-text\">&#39;a&#39;, &#39;aa&#39;, &#39;aaa&#39;, &#39;Hello!&#39;, &#39;11 cats&#39;</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">number</code></td>\n<td>represents both integer and floating point numbers Ex: <code class=\"language-text\">-1, 0, 10.4</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">boolean</code></td>\n<td><code class=\"language-text\">true, false</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">object</code></td>\n<td>A collection of properties.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">symbol</code></td>\n<td>Represents a unique identifier.</td>\n</tr>\n</tbody>\n</table>\n<h2>Variables</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// declare a variable</span>\n<span class=\"token keyword\">let</span> variableExample<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// store values</span>\n<span class=\"token keyword\">let</span> myNumber <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"myVar\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add, subtract, multiply and divide numbers</span>\nmyOps <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15</span>\nmyOps <span class=\"token operator\">=</span> <span class=\"token number\">12</span> <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\nmyOps <span class=\"token operator\">=</span> <span class=\"token number\">13</span> <span class=\"token operator\">*</span> <span class=\"token number\">13</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 169</span>\nmyOps <span class=\"token operator\">=</span> <span class=\"token number\">16</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span>\n\n<span class=\"token comment\">// increment and decrement numbers</span>\ni<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the equivalent of i = i + 1</span>\ni<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// the equivalent of i = i - 1;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 var, let and const</h3>\n<ul>\n<li>Unlike <code class=\"language-text\">var</code>, <code class=\"language-text\">let</code> throws an error if you declare the same variable twice.</li>\n<li>Variables declared with <code class=\"language-text\">let</code> inside a block, statement, or expression, its scope is limited to that block, statement, or expression.</li>\n<li>Variables declared with <code class=\"language-text\">const</code> are read-only and cannot be reassigned.</li>\n<li>Objects (including arrays and functions) assigned to a variable using <code class=\"language-text\">const</code> are still mutable and only prevents the reassignment of the variable identifier.</li>\n</ul>\n<p>To ensure your data doesn't change, JavaScript provides a function Object.freeze to prevent data mutation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key1<span class=\"token operator\">:</span> <span class=\"token string\">\"val1\"</span><span class=\"token punctuation\">,</span>\n  key2<span class=\"token operator\">:</span> <span class=\"token string\">\"val2\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>review <span class=\"token operator\">=</span> <span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//will be ignored. Mutation not allowed</span>\nobj<span class=\"token punctuation\">.</span>newProp <span class=\"token operator\">=</span> <span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will be ignored. Mutation not allowed</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { key1: \"val1\", key2:\"val2\"}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Strings</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// concatenating strings</span>\n<span class=\"token keyword\">let</span> conStr <span class=\"token operator\">=</span> <span class=\"token string\">\"A. \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"B.\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// concatenating strings with +=</span>\n<span class=\"token keyword\">let</span> ourStr <span class=\"token operator\">=</span> <span class=\"token string\">\"A. \"</span><span class=\"token punctuation\">;</span>\nourStr <span class=\"token operator\">+=</span> <span class=\"token string\">\"B.\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// constructing strings with variables</span>\n<span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token string\">\"Juan M.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ourStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, our name is \"</span> <span class=\"token operator\">+</span> myName <span class=\"token operator\">+</span> <span class=\"token string\">\", how are you?\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// appending variables to strings</span>\n<span class=\"token keyword\">let</span> anAdjective <span class=\"token operator\">=</span> <span class=\"token string\">\"awesome!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ourStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Coding is \"</span><span class=\"token punctuation\">;</span>\nourStr <span class=\"token operator\">+=</span> anAdjective<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Escape sequences</h3>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">\\&#39;</code></td>\n<td>single quote (<code class=\"language-text\">&#39;</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\&quot;</code></td>\n<td>double quote (<code class=\"language-text\">&quot;</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\\\</code></td>\n<td>backslash (<code class=\"language-text\">\\</code>)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\n</code></td>\n<td>newline</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\r</code></td>\n<td>carriage return</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\t</code></td>\n<td>tab</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\b</code></td>\n<td>backspace</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\f</code></td>\n<td>form feed</td>\n</tr>\n</tbody>\n</table>\n<h3>The length of a string</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token string\">\"Juan M.\"</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>Split and Join</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'a string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> splittedStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ​​​​​[ 'a', ' ', 's', 't', 'r', 'i', 'n', 'g' ]​​​​​</span>\n\n<span class=\"token keyword\">let</span> joinedStr <span class=\"token operator\">=</span> splittedStr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a string​​​​​</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Index of a String</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">//first element has an index of 0</span>\n<span class=\"token keyword\">let</span> firstLetterOfFirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">;</span>\nfirstLetterOfFirstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A</span>\n\n<span class=\"token comment\">// find the las character of a string</span>\n<span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastLetterOfFirstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">[</span>firstName<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Template Literals</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Template literal with multi-line and string interpolation</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>person<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!\nI am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>person<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hello, my name is Alice!</span>\n<span class=\"token comment\">// I am 26 years old.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Arrays</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> sandwich <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"peanut butter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jelly\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bread\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// nested arrays</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Bulls\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"White Sox\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Index of an array</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ourData <span class=\"token operator\">=</span> ourArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// equals 50</span>\n\n<span class=\"token comment\">// modify an array with indexes</span>\n<span class=\"token keyword\">let</span> ourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nourArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// equals [15,40,30]</span>\n\n<span class=\"token comment\">// access multi-dimensional arrays with indexes</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[10,11,12], 13, 14]</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [10,11,12]</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Manipulate arrays with reverse, push, pop, shift and unshift</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// reverse an array</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ​​​​​[ 3, 'two', 1 ]</span>\n\n<span class=\"token comment\">// push() to append data to the end of an array</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// arr is now [1,2,3,4]</span>\n\n<span class=\"token comment\">// pop() to \"pop\" a value off of the end of an array</span>\n<span class=\"token keyword\">let</span> threeArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> oneDown <span class=\"token operator\">=</span> threeArr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>oneDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>threeArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns [1, 4]</span>\n\n<span class=\"token comment\">// shift() removes the first element of an array</span>\n<span class=\"token keyword\">let</span> ourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> removedFromOurArray <span class=\"token operator\">=</span> ourArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// removedFromOurArray now equals 1 and ourArray now equals [2, [3]].</span>\n\n<span class=\"token comment\">// unshift() adds the element at the beginning of the array</span>\n<span class=\"token keyword\">let</span> ourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Stimpson\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nourArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ourArray now equals [\"J\", \"cat\"]</span>\nourArray<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Happy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ourArray now equals [\"Happy\", \"J\", \"cat\"]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Remove any element with splice</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// first parameter is the index, the second indicates the number of elements to delete.</span>\n<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'today'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'was'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'not'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'so'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// remove 2 elements beginning with the 3rd element</span>\n<span class=\"token comment\">// array now equals ['today', 'was', 'great']</span>\n\n<span class=\"token comment\">// also returns a new array containing the value of the removed elements</span>\n<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'am'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'feeling'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'really'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'happy'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// newArray equals ['really', 'happy']</span>\n\n<span class=\"token comment\">// the third parameter, represents one or more elements, let us add them</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">colorChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> newColor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> colorScheme <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#878787'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#a08794'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#bb7e8c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#c9b6be'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#d1becf'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ncolorScheme <span class=\"token operator\">=</span> <span class=\"token function\">colorChange</span><span class=\"token punctuation\">(</span>colorScheme<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#332327'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// we have removed '#bb7e8c' and added '#332327' in its place</span>\n<span class=\"token comment\">// colorScheme now equals ['#878787', '#a08794', '#332327', '#c9b6be', '#d1becf']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Copy an array with slice</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Copies a given number of elements to a new array and leaves the original array untouched</span>\n<span class=\"token keyword\">let</span> weatherConditions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'rain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'snow'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sleet'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hail'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clear'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> todaysWeather <span class=\"token operator\">=</span> weatherConditions<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// todaysWeather equals ['snow', 'sleet'];</span>\n<span class=\"token comment\">// weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>indexOf</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apples'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pears'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'oranges'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'peaches'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pears'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dates'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -1</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'oranges'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pears'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1, the first index at which the element exists</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Accessing Nested Arrays</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ourPets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    animalType<span class=\"token operator\">:</span> <span class=\"token string\">\"cat\"</span><span class=\"token punctuation\">,</span>\n    names<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Meowzer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fluffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kit-Cat\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    animalType<span class=\"token operator\">:</span> <span class=\"token string\">\"dog\"</span><span class=\"token punctuation\">,</span>\n    names<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Spot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bowser\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Frankie\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nourPets<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Fluffy\"</span>\nourPets<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>names<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Spot\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Includes to Determine if an Array Contains an Element</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfruits<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3>ES6 The Spread Operator</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// The ES5 code below uses apply() to compute the maximum value in an array.</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> maximus <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 89</span>\n\n<span class=\"token comment\">// ...arr returns an unpacked array. In other words, it spreads the array.</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> maximus <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 89</span>\n\n<span class=\"token comment\">// [...new Set(arr)] = unique value array</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> uniq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3,4,5]</span>\n\n<span class=\"token comment\">// copy an array</span>\n<span class=\"token keyword\">let</span> thisArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> thatArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>thisArray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// thatArray equals [true, true, undefined, false, null]</span>\n<span class=\"token comment\">// thisArray remains unchanged, and is identical to thatArray</span>\n\n<span class=\"token comment\">// combine arrays</span>\n<span class=\"token keyword\">let</span> thisArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sage'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rosemary'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'parsley'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'thyme'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> thatArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'basil'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cilantro'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>thisArray<span class=\"token punctuation\">,</span> <span class=\"token string\">'coriander'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// thatArray now equals ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Destructuring Arrays to Assign Variables</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2</span>\n\n<span class=\"token comment\">// it can access any value by using commas to reach the desired index</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2, 5</span>\n\n<span class=\"token comment\">// to collect the rest of the elements into a separate array.</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 4, 5, 7]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>JavaScript Objects</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Whiskers\"</span><span class=\"token punctuation\">,</span>\n  legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  tails<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  enemies<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Water\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dogs\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Accessing Objects Properties</h3>\n<p>Accessing with dot (<code class=\"language-text\">.</code>) notation</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop1<span class=\"token operator\">:</span> <span class=\"token string\">\"val1\"</span><span class=\"token punctuation\">,</span>\n  prop2<span class=\"token operator\">:</span> <span class=\"token string\">\"val2\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> prop1val <span class=\"token operator\">=</span> myObj<span class=\"token punctuation\">.</span>prop1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// val1</span>\n<span class=\"token keyword\">let</span> prop2val <span class=\"token operator\">=</span> myObj<span class=\"token punctuation\">.</span>prop2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// val2</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Accessing with bracket (<code class=\"language-text\">[]</code>) notation</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"Space Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Kirk\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"More Space\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Spock\"</span><span class=\"token punctuation\">,</span>\n  NoSpace<span class=\"token operator\">:</span> <span class=\"token string\">\"USS Enterprise\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"Space Name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Kirk</span>\nmyObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"More Space\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Spock</span>\nmyObj<span class=\"token punctuation\">[</span><span class=\"token string\">\"NoSpace\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// USS Enterprise</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Accessing with variables</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> dogs <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Fido<span class=\"token operator\">:</span> <span class=\"token string\">\"Mutt\"</span><span class=\"token punctuation\">,</span>\n  Hunter<span class=\"token operator\">:</span> <span class=\"token string\">\"Doberman\"</span><span class=\"token punctuation\">,</span>\n  Snoopie<span class=\"token operator\">:</span> <span class=\"token string\">\"Beagle\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myDog <span class=\"token operator\">=</span> <span class=\"token string\">\"Hunter\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myBreed <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">[</span>myDog<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myBreed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Doberman\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Accessing and modifying Nested Objects</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> userActivity <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">23894201352</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token string\">'January 1, 2017'</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    totalUsers<span class=\"token operator\">:</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span>\n    online<span class=\"token operator\">:</span> <span class=\"token number\">42</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nuserActivity<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>online <span class=\"token operator\">=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or</span>\nuserActivity<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>online <span class=\"token operator\">=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or</span>\nuserActivity<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'online'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Creating an array from the keys of an object</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Alan<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">27</span><span class=\"token punctuation\">,</span>\n    online<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Jeff<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>\n    online<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Sarah<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span>\n    online<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Ryan<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n    online<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getArrayOfUsers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Modifying Objects Properties</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Updating object properties</span>\n<span class=\"token keyword\">let</span> ourDog <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Camper\"</span><span class=\"token punctuation\">,</span>\n  legs<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n  tails<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"everything!\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nourDog<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Happy Camper\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or</span>\nourDog<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Happy Camper\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// add new properties</span>\nourDog<span class=\"token punctuation\">.</span>bark <span class=\"token operator\">=</span> <span class=\"token string\">\"bow-wow\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or</span>\nourDog<span class=\"token punctuation\">[</span><span class=\"token string\">\"bark\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bow-wow\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// delete properties</span>\n<span class=\"token keyword\">delete</span> ourDog<span class=\"token punctuation\">.</span>bark<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Objects for Lookups</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> alpha <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span><span class=\"token string\">\"W\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token number\">24</span><span class=\"token operator\">:</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">25</span><span class=\"token operator\">:</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">26</span><span class=\"token operator\">:</span><span class=\"token string\">\"A\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nalpha<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Y\"</span>\nalpha<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"C\"</span>\n\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nalpha<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Y\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Test Object Properties</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  top<span class=\"token operator\">:</span> <span class=\"token string\">\"hat\"</span><span class=\"token punctuation\">,</span>\n  bottom<span class=\"token operator\">:</span> <span class=\"token string\">\"pants\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"top\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"middle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Accessing Nested Objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ourStorage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  desk<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    drawer<span class=\"token operator\">:</span> <span class=\"token string\">\"stapler\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  cabinet<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"top drawer\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      folder1<span class=\"token operator\">:</span> <span class=\"token string\">\"a file\"</span><span class=\"token punctuation\">,</span>\n      folder2<span class=\"token operator\">:</span> <span class=\"token string\">\"secrets\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"bottom drawer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"soda\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nourStorage<span class=\"token punctuation\">.</span>cabinet<span class=\"token punctuation\">[</span><span class=\"token string\">\"top drawer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>folder2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"secrets\"</span>\nourStorage<span class=\"token punctuation\">.</span>desk<span class=\"token punctuation\">.</span>drawer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"stapler\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Destructuring Variables from Objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// Consider the following ES5 code</span>\n<span class=\"token keyword\">let</span> voxel <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">3.6</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">7.4</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">6.54</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> voxel<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// x = 3.6</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> voxel<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// y = 7.4</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> voxel<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span> <span class=\"token comment\">// z = 6.54</span>\n\n<span class=\"token comment\">// the same assignment statement with ES6 destructuring syntax</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> voxel<span class=\"token punctuation\">;</span> <span class=\"token comment\">// x = 3.6, y = 7.4, z = 6.54</span>\n\n<span class=\"token comment\">// to store the values of voxel.x into a, voxel.y into b, and voxel.z into c, you have that freedom as well</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> a<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> b<span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> c <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> voxel<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a = 3.6, b = 7.4, c = 6.54</span>\n\n<span class=\"token comment\">// Destructuring Variables from Nested Objects</span>\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  end<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> startX<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> startY <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>startX<span class=\"token punctuation\">,</span> startY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5, 6</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Destructuring to Pass an Object as a Function's Parameters</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// destructure the object in a function argument itself.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">profileUpdate</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">profileData</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> nationality<span class=\"token punctuation\">,</span> location <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> profileData<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do something with these variables</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this can also be done in-place:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">profileUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> nationality<span class=\"token punctuation\">,</span> location <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* do something with these fields */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Object Literal Declarations Using Simple Fields</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMousePosition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> x<span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> y\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the same function rewritten to use this new syntax:</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMousePosition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Booleans</h2>\n<p>Booleans may only be one of two values: true or false. They are basically little on-off switches,\nwhere true is \"on\" and false is \"off\". These two states are mutually exclusive.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>If Else Statements</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition is <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  statement is executed\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>Else Statement</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Bigger than 10\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"10 or Less\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Else if statement</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Bigger than 15\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Smaller than 5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Between 5 and 15\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Conditional (Ternary) Operator</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// this if statement...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findGreater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"a is greater\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"b is greater\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// is equivalent to this ternary operator</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findGreater</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> <span class=\"token string\">\"a is greater\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"b is greater\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Multiple Conditional (Ternary) Operators</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// this if statement...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findGreaterOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">===</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"a and b are equal\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"a is greater\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"b is greater\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// is equivalent to this ternary operator</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findGreaterOrEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">===</span> b\n    <span class=\"token operator\">?</span> <span class=\"token string\">\"a and b are equal\"</span>\n    <span class=\"token operator\">:</span> a <span class=\"token operator\">></span> b\n    <span class=\"token operator\">?</span> <span class=\"token string\">\"a is greater\"</span>\n    <span class=\"token operator\">:</span> <span class=\"token string\">\"b is greater\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Switch Statement</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span>\n    statement1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span>\n    statement2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">case</span> valueN<span class=\"token operator\">:</span>\n    statementN<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Default Switch Statement</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> value1<span class=\"token operator\">:</span>\n    statement1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> value2<span class=\"token operator\">:</span>\n    statement2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n    defaultStatement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Multiple Options with Switch Statement</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"1, 2, or 3\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token string\">\"4 alone\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Comparison Operators</h2>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">==</code></td>\n<td>Equality</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">===</code></td>\n<td>Strict Equality</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">!=</code></td>\n<td>Inequality</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">!==</code></td>\n<td>Strict Inequality</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&gt;</code></td>\n<td>Greater Than</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&gt;=</code></td>\n<td>Greater or Equal Than</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&lt;</code></td>\n<td>Less Than</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&lt;=</code></td>\n<td>Less or Equal Than</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">&amp;&amp;</code></td>\n<td>And</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">||</code></td>\n<td>Or</td>\n</tr>\n</tbody>\n</table>\n<h2>While Loops</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ourArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Do...While Loops</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> vourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n  ourArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>For Loops</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ourArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Count Backwards With a For Loop</span>\n<span class=\"token keyword\">let</span> ourArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ourArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Iterate Through an Array</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Nested for loops</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 for-of</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> myArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h2>Functions</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call the function</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Function Arguments</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ourFunctionWithArgs</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">ourFunctionWithArgs</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Return Statement</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">plusThree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">plusThree</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Immediately Invoked Function Expression or IIFE</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A cozy nest is ready\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Arrow Functions</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> myVar <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> myVar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// can be rewritten like this</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> myVar <span class=\"token operator\">=</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> myVar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// and if there is no function body, and only a return value</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// to pass parameters to an arrow function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">doubler</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Higher Order Arrow Functions</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">FBPosts<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> post<span class=\"token punctuation\">.</span>thumbnail <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> post<span class=\"token punctuation\">.</span>shares <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> post<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">></span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the previous function can be rewritten like this</span>\nFBPosts<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> post<span class=\"token punctuation\">.</span>thumbnail <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> post<span class=\"token punctuation\">.</span>shares <span class=\"token operator\">></span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> post<span class=\"token punctuation\">.</span>likes <span class=\"token operator\">></span> <span class=\"token number\">500</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Rest Operator with Function Parameters</h3>\n<p>With the rest operator, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">howMany</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"You have passed \"</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\" arguments.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">howMany</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You have passed 3 arguments</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">howMany</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You have passed 4 arguments.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Declarative Functions within Objects</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// When defining functions within objects in ES5, we have to use the keyword function</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Taylor\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sayHello</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello! My name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// With ES6, You can remove the function keyword and colon</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Taylor\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello! My name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Regular Expressions</h2>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">\\</code>        | Escapes a special character.</td>\n<td></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">|</code></td>\n<td>Search for multiple patterns. To match \"yes\" or \"no\", the regex is <code class=\"language-text\">/yes | no/</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">i</code></td>\n<td>This flag is used to ignore upper and lowercase. <code class=\"language-text\">/ignorecase/i</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">g</code></td>\n<td>Search or extract a pattern more than once.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">.</code></td>\n<td>The wildcard character <code class=\"language-text\">.</code> will match any character except new lines.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[]</code></td>\n<td>Allow you to define the characters to match. <code class=\"language-text\">/b[au]g/</code> will match \"bag\", \"bug\" but not \"bog\".</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[a-z]</code></td>\n<td>Match all the characters between a and z.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[1-9]</code></td>\n<td>Match all the numbers between 1 and 9.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[a-z1-9]</code></td>\n<td>Match all the character between a and z, and the numbers between 1 and 9.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">[^]</code></td>\n<td>Match the characters not in the set. <code class=\"language-text\">[^a-e]</code> match all other characters except A, B, C, D, and E.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">+</code></td>\n<td>Match 1 or more occurrences of the previous character in a row.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">*</code></td>\n<td>Match 0 or more occurrences of the previous character.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">?</code></td>\n<td>Match 0 or 1 occurrence of the previous character. Useful for Lazy matching.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">^</code></td>\n<td>Search for patterns at the beginning of strings.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">$</code></td>\n<td>Search for patterns at the end of a string.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\w</code></td>\n<td>Equal to <code class=\"language-text\">[A-Za-z0-9_]</code>. Matches upper, lowercase, numbers the and underscore character (-).</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\W</code></td>\n<td>Matches any nonword character. Equivalent to <code class=\"language-text\">[^a-za-z0-9_]</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\d</code></td>\n<td>Equal to <code class=\"language-text\">[0-9]</code>. Match one digit.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\D</code></td>\n<td>Equal to <code class=\"language-text\">[^0-9]</code>. Match one non digit.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\s</code></td>\n<td>Match a whitespace.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">\\S</code></td>\n<td>Match everything except whitespace.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a{2,5}</code></td>\n<td>Match the letter <code class=\"language-text\">a</code> between 3 and 5 times.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a{2,}</code></td>\n<td>Specify only the lower number of matches.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a{5}</code></td>\n<td>Specify the exact number of matches.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">(...)</code></td>\n<td>Specify a group that can be acceded with number (from 1)</td>\n</tr>\n</tbody>\n</table>\n<h3>Regex Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">test()</code></td>\n<td>Returns true or false if the pattern match a string or not.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">match()</code></td>\n<td>Extract the actual matches found.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">replace()</code></td>\n<td>Search and replace text in a string .</td>\n</tr>\n</tbody>\n</table>\n<h3>Examples</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// test method returns true or false if the pattern match a string or not</span>\n<span class=\"token keyword\">let</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/Hello/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> myRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// extract the matches of a regex with the match method</span>\n<span class=\"token keyword\">let</span> extractStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Extract the word 'coding' from this string.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> codingRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/coding/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> extractStr<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>codingRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Search and replace</span>\n<span class=\"token keyword\">let</span> wrongText <span class=\"token operator\">=</span> <span class=\"token string\">\"The sky is silver.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> silverRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/silver/</span><span class=\"token punctuation\">;</span>\nwrongText<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>silverRegex<span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"The sky is blue.\"</span>\n\n<span class=\"token comment\">// search for multiple patterns using the alternation or OR operator: |</span>\n<span class=\"token keyword\">let</span> petString <span class=\"token operator\">=</span> <span class=\"token string\">\"James has a pet cat.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> petRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/dog|cat|bird|fish/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> petRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>petString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ignore upper or lowercase</span>\n<span class=\"token keyword\">let</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"freeCodeCamp\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> fccRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/freeCodeCamp/i</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// flag i</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> fccRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>myString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Search or extract a pattern more than once</span>\n<span class=\"token keyword\">let</span> twinkleStar <span class=\"token operator\">=</span> <span class=\"token string\">\"Twinkle, twinkle, little star\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> starRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/Twinkle/gi</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a regex can have multiple flags</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> twinkleStar<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>starRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The wildcard character . will match any character except new lines.</span>\n<span class=\"token keyword\">let</span> exampleStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Let's have fun with regular expressions!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> unRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/.un/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> unRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>exampleStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// define the characters to match, in this example all the vowels in quoteSample</span>\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"Beware of bugs in the above code; I have only proved it correct, not tried it.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vowelRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[aeiou]/gi</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>vowelRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match all the characters in quoteSample (between a and z)</span>\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"The quick brown fox jumps over the lazy dog.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> alphabetRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-z]/gi</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>alphabetRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match all the character between two characters and numbers</span>\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"Blueberry 3.141592653s are delicious.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[h-s2-6]/gi</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match all that is not a number or a vowel</span>\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"3 blind mice.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^aeiou0-9]/gi</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match 1 or more occurrences of the previous character (* for 0 or more)</span>\n<span class=\"token keyword\">let</span> difficultSpelling <span class=\"token operator\">=</span> <span class=\"token string\">\"Mississippi\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/s+/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> difficultSpelling<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ? Match 0 or 1 occurrence of the previous character. Useful for Lazy matching</span>\n<span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"titanic\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/t[a-z]*?i/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>myRegex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Search for patterns at the beginning of strings</span>\n<span class=\"token keyword\">let</span> rickyAndCal <span class=\"token operator\">=</span> <span class=\"token string\">\"Cal and Ricky both like racing.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> calRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/^Cal/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> calRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>rickyAndCal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Search for patterns at the end of a string</span>\n<span class=\"token keyword\">let</span> caboose <span class=\"token operator\">=</span> <span class=\"token string\">\"The last car on a train is the caboose\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/caboose$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> lastRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>caboose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \\w is equal to [A-Za-z0-9_]</span>\n<span class=\"token keyword\">let</span> quoteSample <span class=\"token operator\">=</span> <span class=\"token string\">\"The five boxing wizards jump quickly.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> alphabetRegexV2 <span class=\"token operator\">=</span> <span class=\"token regex\">/\\w/g</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> quoteSample<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>alphabetRegexV2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match only 3 to 6 letter h's in the word \"Oh no\"</span>\n<span class=\"token keyword\">let</span> ohStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Ohhh no\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ohRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/Oh{3,6} no/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> ohRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>ohStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Match both the American English (favorite) and the British English (favourite) version of the word</span>\n<span class=\"token keyword\">let</span> favWord <span class=\"token operator\">=</span> <span class=\"token string\">\"favorite\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> favRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/favou?rite/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> favRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>favWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Groups () let you reuse patterns</span>\n<span class=\"token keyword\">let</span> repeatNum <span class=\"token operator\">=</span> <span class=\"token string\">\"42 42 42\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> reRegex <span class=\"token operator\">=</span>  <span class=\"token regex\">/^(\\d+)\\s\\1\\s\\1$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// every 1 represent the group (\\d+)</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> reRegex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>repeatNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Remove all the spaces at the beginning an end of a string</span>\n<span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token string\">\"   Hello, World!  \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> wsRegex <span class=\"token operator\">=</span> <span class=\"token regex\">/^\\s+(.*\\S)\\s+$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>wsRegex<span class=\"token punctuation\">,</span> <span class=\"token string\">'$1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns 'Hello, World!'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Object Oriented Programming</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> duck <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Aflac\"</span><span class=\"token punctuation\">,</span>\n  numLegs<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"The name of this duck is \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nduck<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"The name of this duck is Aflac.\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Constructors and New Objects</h3>\n<p>Constructors follow a few conventions:</p>\n<ul>\n<li>Constructors are defined with a capitalized name to distinguish them from other functions that are not constructors.</li>\n<li>Constructors use the keyword this to set properties of the object they will create. Inside the constructor, this refers to the new object it will create.</li>\n<li>Constructors define properties and behaviors instead of returning a value as other functions might.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// constructor</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> color</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// create a new instance of Bird</span>\n<span class=\"token keyword\">let</span> cardinal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bruce\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> duck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Donald\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// access and modify blueBird object</span>\ncardinal<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// Bruce</span>\ncardinal<span class=\"token punctuation\">.</span>color <span class=\"token comment\">// red</span>\ncardinal<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> green<span class=\"token punctuation\">;</span>\ncardinal<span class=\"token punctuation\">.</span>color <span class=\"token comment\">// green</span>\n\n<span class=\"token comment\">// check if an object is an instance of a constructor</span>\ncardinal <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\ncrow <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">// check an objects own (name, color, numLegs) properties</span>\ncardinal<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\ncardinal<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token comment\">//check an objects properties with the constructor property</span>\ncardinal<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Bird<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// use constructor.prototype to add new properties to object constructors</span>\n<span class=\"token class-name\">Bird</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>cute <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\ncardinal<span class=\"token punctuation\">.</span>cute <span class=\"token comment\">// true</span>\ncrow<span class=\"token punctuation\">.</span>cute <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// add more than one property and method to a constructor</span>\n<span class=\"token class-name\">Bird</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  constructor<span class=\"token operator\">:</span> Bird<span class=\"token punctuation\">,</span> <span class=\"token comment\">// specify the constructor</span>\n  numLegs<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// new property</span>\n\n  <span class=\"token function-variable function\">eat</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// new method</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nom nom nom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function-variable function\">describe</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// new method</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My name is \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> chicken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dinner\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"brown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nchicken<span class=\"token punctuation\">.</span>numLegs <span class=\"token comment\">// 2</span>\nchicken<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// nom nom nom</span>\nchicken<span class=\"token punctuation\">.</span><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// My name is Dinner</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Inheritance</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  constructor<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">eat</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nom nom nom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// make the Cat constructor inherit the eat function from Animal</span>\n<span class=\"token class-name\">Cat</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> myCat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'charles'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCat<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// nom nom nom</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Add methods after Inheritance and override them</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nom nom nom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Dog constructor</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// make the Gog constructor inherit the eat function from Animal</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">bark</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wof wof!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the new object will have both, the inherited eat() and its own bark() method</span>\n<span class=\"token keyword\">let</span> beagle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbeagle<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"nom nom nom\"</span>\nbeagle<span class=\"token punctuation\">.</span><span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Woof!\"</span>\n\n<span class=\"token comment\">// override an inherited method</span>\n<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"nice meeeeat!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> doberman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndoberman<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// nice meeeeat!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Mixins</h3>\n<p>A mixin allows unrelated objects to use a collection of functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> bird <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Donald\"</span><span class=\"token punctuation\">,</span>\n    numLegs<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">let</span> boat <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Warrior\"</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"race-boat\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this mixin contain the glide method</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">glideMixin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">glide</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gliding...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// the object is passed to the mixin and the glide method is assigned</span>\n<span class=\"token function\">glideMixin</span><span class=\"token punctuation\">(</span>bird<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">glideMixin</span><span class=\"token punctuation\">(</span>boat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbird<span class=\"token punctuation\">.</span><span class=\"token function\">glide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"gliding...\"</span>\nboat<span class=\"token punctuation\">.</span><span class=\"token function\">glide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"gliding...\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Closures to Protect Properties</h3>\n<p>In JavaScript, a function always has access to the context in which it was created. This is called closure. Now, the property can only be accessed and changed by methods also within the constructor function. In JavaScript, this is called closure.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// instead of this.hatchedEgg...</span>\n  <span class=\"token keyword\">let</span> hatchedEgg <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// private property</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getHatchedEggCount</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// publicly available method that a bird object can use</span>\n    <span class=\"token keyword\">return</span> hatchedEgg<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> ducky <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nducky<span class=\"token punctuation\">.</span>hatchedEgg <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// nothing happens</span>\nducky<span class=\"token punctuation\">.</span>getHatchedEggCount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Modules</h3>\n<p>An immediately invoked function expression (IIFE) is often used to group related functionality into a single object or module.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> funModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">isCuteMixin</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isCute</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">singMixin</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      obj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Singing to an awesome tune\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> goodBoy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// assign the singMixin method to the goodBoy object</span>\nfunModule<span class=\"token punctuation\">.</span><span class=\"token function\">singMixin</span><span class=\"token punctuation\">(</span>goodBoy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngoodBoy<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Singing to an awesome tune</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>ES6 Object Oriented Programming</h2>\n<p>ES6 provides a new syntax to help create objects, the keyword <code class=\"language-text\">class</code>.The class syntax\nis just a syntax, and not a full-fledged class based implementation of object oriented paradigm,\nunlike in languages like Java, or Python, or Ruby etc.</p>\n<h3>ES6 Classes</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getSummary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> was written by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> years <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>years<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> years old</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nbook <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Book One'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbook<span class=\"token punctuation\">.</span><span class=\"token function\">getSummary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Book One was written by John Doe in 2016 </span>\nbook<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Book One is 3 years old</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 getters and setters</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// getter</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_author<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// setter</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">updatedAuthor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_author <span class=\"token operator\">=</span> updatedAuthor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> lol <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"anonymous\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lol<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// anonymous</span>\nlol<span class=\"token punctuation\">.</span>writer <span class=\"token operator\">=</span> <span class=\"token string\">\"wut\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lol<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wut</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Statics Methods</h3>\n<p>Static methods allow using methods without instantiating an object</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hi!\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nBook<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hi!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>ES6 Inheritance</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> year</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span> author<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year <span class=\"token operator\">=</span> year<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getSummary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> was written by </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Magazine</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">title<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">,</span> month</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">,</span> year<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>month <span class=\"token operator\">=</span> month<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hi!\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmag <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Magazine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Mag'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'People'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2019</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmag<span class=\"token punctuation\">.</span><span class=\"token function\">getSummary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mag was written by People in 2019 </span>\nmag<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hi!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Functional Programming</h2>\n<h3>Map</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> watchList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Inception\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"imdbRating\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.8\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"movie\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Interstellar\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"imdbRating\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"movie\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Dark Knight\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"imdbRating\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"9.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"movie\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Batman Begins\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"imdbRating\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"7.9\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"movie\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rating <span class=\"token operator\">=</span> watchList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">movie</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>title<span class=\"token operator\">:</span> movie<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span> rating<span class=\"token operator\">:</span> movie<span class=\"token punctuation\">.</span>imdbRating<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* [ { title: 'Inception', rating: '8.8' }, \n  { title: 'Interstellar', rating: '8.6' }, \n  { title: 'The Dark Knight', rating: '9.0' }, \n  { title: 'Batman Begins', rating: '7.9' } ]  */</span>\n\n<span class=\"token comment\">// or...</span>\n<span class=\"token keyword\">const</span> rating <span class=\"token operator\">=</span> watchList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">movie</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> movie<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span>\n    rating<span class=\"token operator\">:</span> movie<span class=\"token punctuation\">.</span>imdbRating\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* [ { title: 'Inception', rating: '8.8' }, \n  { title: 'Interstellar', rating: '8.6' }, \n  { title: 'The Dark Knight', rating: '9.0' }, \n  { title: 'Batman Begins', rating: '7.9' } ]  */</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>ES6 import and export</h2>\n<blockquote>\n<p>The lessons in this section handle non-browser features. import won't work on a browser directly.\nHowever, we can use various tools to create code out of this to make it work in browser.</p>\n</blockquote>\n<h3>import</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// we can choose which parts of a module or file to load into a given file.</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"file_path\"</span>\n<span class=\"token comment\">// We can also import variables the same way!</span>\n\n<span class=\"token comment\">// Import Everything from a File</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> name_of_your_choice <span class=\"token keyword\">from</span> <span class=\"token string\">\"file_path\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>export</h3>\n<p>In order for <code class=\"language-text\">import</code> to work, though, we must first <code class=\"language-text\">export</code> the functions or variables we need.\nLike import, export is a non-browser feature.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">capitalizeString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> capitalizeString <span class=\"token punctuation\">}</span> <span class=\"token comment\">//How to export functions.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//How to export variables.</span>\n\n<span class=\"token comment\">// Alternatively, if you would like to compact all your export statements into one line, you can take this approach</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">capitalizeString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> capitalizeString<span class=\"token punctuation\">,</span> foo <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// use export default if only one value is being exported from a file.</span>\n<span class=\"token comment\">// It is also used to create a fallback value for a file or module</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// and to import</span>\n<span class=\"token keyword\">import</span> add <span class=\"token keyword\">from</span> <span class=\"token string\">\"math_functions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Will return 9</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"Comments Data types JavaScript provides seven different data types: Data Types Examples  A variable that has not been assigned a value is of type .  no value…","frontmatter":{"date":"10 October, 2019","path":"/blog/es6cs","title":"JavaScript cheat sheet"},"fields":{"readingTime":{"text":"26 min read"}}}},"pageContext":{}}}